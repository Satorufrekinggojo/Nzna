const fs = require('fs-extra');
const axios = require('axios');
const path = require('path');
const { getPrefix } = global.utils;
const { commands, aliases } = global.GoatBot;

module.exports = {
    config: {
        name: 'helpx',
        version: '1.0',
        author: 'gojo || kshitiz',
        countDown: 5,
        role: 0,
        shortDescription: {
            en: 'List all available commands'
        },
        longDescription: {
            en: 'View a comprehensive list of all available commands'
        },
        category: 'info',
        guide: {
            en: '{pn} / help'
        },
        priority: 1
    },

    onStart: async function ({ message, args, event, threadsData, role }) {
        const { threadID } = event;
        const threadData = await threadsData.get(threadID);
        const prefix = getPrefix(threadID);

        if (args.length === 0) {
            await this.customHelpMessage(message);
            return;
        }

        if (args[0] === '-s') {
            const category = args[1]?.toUpperCase();
            if (category) {
                await this.listCommandsByCategory(category, message);
            } else {
                await message.reply(`Please specify a category after '-s'. Example: ${prefix}helpx -s A`);
            }
            return;
        }

        if (args[0] === '-2') {
            await this.listAllCommands(message);
            return;
        }

        const commandName = args[0].toLowerCase();
        const commandInfo = await this.getCommandInfo(commandName);

        if (commandInfo) {
            const response = `
━━━  ❖  ━━━
» Description: ${commandInfo.description}
» Other names: ${commandInfo.aliases}
» Other names in your group: ${commandInfo.groupAliases}
» Version: ${commandInfo.version}
» Role: ${commandInfo.roleText}
» Time per command: ${commandInfo.countDown}s
» Author: ${commandInfo.author}
━━━  ❖  ━━━
» Usage guide:
${commandInfo.usage}
━━━  ❖  ━━━
» Notes:
• The content inside <XXXXX> can be changed
• The content inside [a|b|c] is a or b or c
            `;
            await message.reply(response);
        } else {
            await message.reply(`The command "${commandName}" does not exist.`);
        }
    },

    customHelpMessage: async function (message) {
        const totalCommands = commands.size;
        const customHelpMessage = `
╔═══════════╗
    𝗡𝗜𝗦𝗛𝗜𝗠𝗜𝗬𝗔 𝗖𝗵𝗮𝘁𝗯𝗼𝘁
 ╚═══════════╝

╭──『  𝗢𝗪𝗡𝗘𝗥  』
 ✧adminonly ✧approved 
 ✧backupdata ✧bin 
 ✧bio ✧bot ✧spam
 ✧cmd ✧code ✧deletecmd
 ✧devonly  ✧edit6
 ✧edit8 ✧editx ✧event
 ✧file ✧getfbstate 
 ✧hubble ✧ignoreonlyad 
 ✧ignoreonlyadbox 
 ✧jsontomongodb 
 ✧listbox ✧loadconfig
 ✧notice ✧notification
 ✧owner ✧owner2 ✧respect 
 ✧setavt ✧setlang 
 ✧setrankup ✧thread ✧up 
 ✧update ✧upt ✧upt2 ✧upt3 
 ✧user ✧vip ✧w
 ✧w4 ✧resetprefix ✧setalias
╰────────────◊

╭──『  𝗔𝗗𝗠𝗜𝗡  』
 ✧block ✧leave ✧main 
 ✧automaticaccept
 ✧usage ✧out ✧ping 
 ✧addfile ✧autoget 
 ✧chekjson ✧delete ✧stats 
 ✧adminlist ✧testhtml
 ✧uptime ✧uptime2 
 ✧autoseen ✧clean ✧eval 
 ✧join ✧shell 
 ✧goatbotcommandcreate 
 ✧example 
 ✧goatmart ✧restart
╰────────────◊

╭──『  𝗜𝗠𝗔𝗚𝗘  』
 ✧affect ✧arrest ✧avatar
 ✧banner ✧batslap ✧blink
 ✧Chad ✧coupledp ✧cover 
 ✧ephoto ✧giphy ✧horror
 ✧imgsearch ✧imgur ✧link
 ✧mpanel ✧pin ✧pr
 ✧profile ✧prompt 
 ✧sorthelp ✧spy
 ✧template ✧trigger
 ✧ws ✧cover2
╰────────────◊

╭──『 𝗧𝗢𝗢𝗟'𝗦  』
 ✧fakechat ✧memberlist 
 ✧qrcode ✧wish ✧namaj 
 ✧ocr ✧owners ✧clonevoice 
 ✧ownerx ✧prefix ✧qr ✧nn
 ✧fbaccount ✧system 
 ✧rembg ✧home ✧support 
 ✧muptime ✧weather 
 ✧emojimean ✧post
 ✧apimarket ✧device
 ✧theme ✧tag ✧font
 ✧countryinfo ✧botstats 
 ✧deldatabase ✧bday 
 ✧fbcover ✧ analytics
 ✧testjs ✧antiout ✧ip 
 ✧appstore ✧devicetop
╰────────────◊

╭──『  𝗙𝗨𝗡  』
 ✧ball ✧biden ✧cat
 ✧card ✧clown ✧drip 
 ✧duck ✧elon ✧emojimix 
 ✧emojistory ✧fact 
 ✧flirt ✧hack ✧impress 
 ✧inbox ✧joke2 ✧love 
 ✧mark ✧married ✧myfact 
 ✧myquote ✧nokia 
 ✧notify ✧obama 
 ✧propose ✧quote ✧quotes 
 ✧randomcatname ✧rip
 ✧rizz ✧sad ✧spiderman 
 ✧anya ✧kiss2 ✧meme 
 ✧taylorquote ✧tes 
 ✧train ✧wishcard 
 ✧content ✧hell ✧joke 
╰────────────◊

╭──『 𝗚𝗔𝗠𝗘  』
 ✧aniquiz ✧candycrush 
 ✧dhbc ✧dice ✧tof
 ✧dicedash ✧frogjump 
 ✧guessactor✧playcard 
 ✧guessnumber 
 ✧memorygame ✧daily 
 ✧penalty ✧riddle 
 ✧quiz ✧fight 
 ✧tictactoe ✧tod ✧ttt 
 ✧coinflip ✧tttv2
 ✧tttvx ✧uncrossable 
 ✧wordguess ✧worker
 ✧xcup ✧slot 
 ✧truthordare ✧country
 ✧slot ✧fish ✧goingmarry
╰────────────◊

╭──『 𝗕𝗢𝗫-𝗖𝗛𝗔𝗧 』
 ✧adduser ✧admin ✧ads
 ✧all ✧antichangeinfobox 
 ✧autosetname ✧badwords 
 ✧ban ✧busy ✧count 
 ✧filteruser ✧gay ✧kick 
 ✧membercount✧menu 
 ✧nncheck✧onlyadminbox 
 ✧refresh ✧rules 
 ✧sendnoti ✧setname
 ✧unsend ✧warn 
 ✧spamban ✧spygc
╰────────────◊

╭──『 𝗨𝗧𝗜𝗟𝗜𝗧𝗬  』
 ✧album ✧amvquote
 ✧bibleverse ✧cmdstore 
 ✧connectgc ✧image ✧imgbb 
 ✧inf ✧ipshow ✧monitor 
 ✧note ✧sendwebhook 
 ✧translate ✧upscaleai 
 ✧v2a ✧view ✧word ✧smg 
 ✧ss ✧tempmail ✧tg 
╰────────────◊

╭──『 𝗙𝗨𝗡-𝟮 』
 ✧berojgar  ✧dance 
 ✧fun ✧fun2 ✧cm
╰────────────◊

╭──『 𝗨𝗧𝗜𝗟𝗜𝗧𝗬-𝟮  』
 ✧accept ✧avatar1 ✧bc
 ✧calendar ✧cricket 
 ✧gmage ✧pastebin 
 ✧requestmain ✧short
╰────────────◊

╭──『  𝗜𝗡𝗙𝗢  』
 ✧cbin ✧info ✧stalk
╰────────────◊

╭──『 𝗙𝗢𝗢𝗧𝗕𝗔𝗟𝗟  』
 ✧messi ✧neymar ✧ramos
 ✧ronaldo
╰────────────◊

╭──『  𝗗𝗘𝗩𝗘𝗟𝗢𝗣𝗘𝗥  』
 ✧scrape ✧whitelist 
 ✧whitelistthread
╰────────────◊

╭──『  𝗠𝗘𝗠𝗘  』
 ✧sciencememe ✧smeme 
 ✧buttslap ✧cry 
 ✧gname ✧trash 
 ✧wanted
 ✧programmingmeme 
╰────────────◊

╭──『  𝗧𝗧𝗦  』
 ✧say  ✧anya2
╰────────────◊

╭──『  𝗦𝗧𝗨𝗗𝗬  』
 ✧advice ✧fact 
 ✧motivation 
 ✧motivation2
╰────────◊

╭──『  𝗚𝗥𝗢𝗨𝗣  』
 ✧spamkick ✧top ✧topxp
╰────────────◊

╭───『  𝗔𝗡𝗜𝗠𝗘 』
 ✧anigif ✧animeinfo 
 ✧animequotes ✧aniwatch
 ✧animetrend ✧anitrace
 ✧anivoice ✧one-piece
 ✧bleach ✧jjk ✧manga
 ✧anime ✧xenoz ✧mangadex
 ✧mangaread ✧quote2 
 ✧waifux ✧art ✧animegirl 
 ✧naruinfo ✧opinfo 
 ✧bleachinfo ✧anistatus 
 ✧aniblur ✧aniedit 
 ✧animetime ✧twixtor 
 ✧anipic
╰────────────◊

╭──『  𝗘𝗖𝗢𝗡𝗢𝗠𝗬  』
 ✧balance ✧money ✧resetbal
 ✧coin ✧richest ✧set
 ✧bank ✧currequest 
╰────────────◊

╭──『  𝗧𝗘𝗫𝗧𝗣𝗥𝗢  』
 ✧khaby ✧willsmith ✧quote3
╰────────────◊

╭─『 𝗖𝗢𝗡𝗧𝗥𝗔𝗖𝗧 』
 ✧callad  ✧botgc 
 ✧supportgc
╰────────────◊

╭──『  𝗠𝗨𝗦𝗜𝗖  』
 ✧animesong ✧audio 
 ✧media ✧sing ✧spotify 
 ✧voicify ✧youtubex 
╰────────────◊

╭──『  𝗟𝗢𝗚𝗢  』
 ✧cardinfo ✧cardinfo2 
╰────────────◊

╭──『  𝗠𝗘𝗗𝗜𝗔 』
 ✧autolink ✧chords 
 ✧convert ✧getlink2
 ✧github ✧lv 
 ✧lyrics ✧singx ✧anya2 
 ✧collab ✧tiktok ✧pmvd 
 ✧pubgedit ✧overlay 
 ✧youtube ✧ytb ✧alldl 
 ✧getlink ✧moviedl 
 ✧song ✧video
╰────────────◊

╭───『 𝗟𝗢𝗩𝗘 』
 ✧cdp ✧kiss ✧pair2 
 ✧pair3 ✧ship ✧us ✧cdp2
╰────────────◊

╭───『  𝗦𝗢𝗖𝗜𝗔𝗟  』
 ✧fbpost ✧fbreport ✧fbshare
╰────────────◊

╭──『  𝗔𝗜 𝗖𝗛𝗔𝗧 』
 ✧ask ✧clips ✧gemini 
 ✧geminiv2 ✧gen 
 ✧gojo ✧gpt ✧hina ✧roast 
 ✧snoop ✧bby ✧boxai ✧ai
 ✧hinu ✧yamato ✧smsg
╰────────────◊

╭──『 𝗚𝗙𝗫 』
 ✧gfx  ✧gfx2 ✧gfx3 
╰────────────◊

╭──『 𝗔𝗜-𝗚𝗘𝗡𝗘𝗥𝗔𝗧𝗘𝗗 』
 ✧prompt3 ✧imagejourney 
 ✧dallex  ✧imaginex 
 ✧imagine ✧genx ✧sdxl
 ✧niji ✧nijiz ✧alya
 ✧realis ✧imagine
 ✧fluxv2 ✧emi ✧gen 
 ✧nixi ✧xl31 ✧ poli
 ✧nigi ✧xl30 ✧flux ✧mgen 
 ✧reality ✧xl ✧nijiv5
 ✧fluxv2 ✧nijiv6 ✧xl4
 ✧alya2 ✧xs ✧niji5
 ✧flux2 ✧niji6 ✧ xl2
 ✧wc(prompt) 
╰────────────◊

╭──『 𝗣𝗢𝗞𝗘𝗠𝗢𝗡 』
 ✧pokebot    ✧pokeinfo 
 ✧pokechamps ✧pokedex 
 ✧poketrade
╰────────────◊

╭──『 𝗖𝗨𝗦𝗧𝗢𝗠 』
 ✧setleave ✧setwelcome 
 ✧shortcut
╰────────────◊

╭──『 𝗪𝗔𝗜𝗙𝗨 𝗚𝗔𝗠𝗘 』
 ✧waifulist ✧waifutop
 ✧waifuinfo ✧waifuinv 
 ✧waifupull ✧waifudex 
 ✧waifusellall
╰────────────◊

╭──『  𝗥𝗔𝗡𝗞  』
 ✧customrankcard ✧rank 
 ✧ranktop ✧rankup 
 ✧ranking
╰────────────◊


━━━ 𝗦𝗨𝗣𝗣𝗢𝗥𝗧 𝗕𝗢𝗫 ━━━
Join Nisimiya Bot Zone ❈ Support Box type: !supportgc or type: !callad to contact with admins.

⇒ Total: ${totalCommands} commands
⇒ Use /help <cmd> to get more information about a command
        `;
        await message.reply(customHelpMessage);
    },

    listCommandsByCategory: async function (category, message) {
        const allCommands = Array.from(commands.entries()).sort();
        let formattedResponse = "";

        formattedResponse += `╭──『  ${category} 』\n`;

        for (const [command, config] of allCommands) {
            if (command.charAt(0).toUpperCase() === category) {
                formattedResponse += `✧${command} `;
            }
        }

        if (formattedResponse === `╭──『  ${category} 』\n`) {
            await message.reply(`No commands found for category ${category}.`);
            return;
        }

        formattedResponse += `\n╰───────────◊\n\nTotal ${category} category cmds = ${allCommands.filter(cmd => cmd[0].charAt(0).toUpperCase() === category).length}`;

        await message.reply(formattedResponse);
    },

    listAllCommands: async function (message) {
        const allCommands = Array.from(commands.keys()).sort();
        let formattedResponse = "";

        formattedResponse += `╭──『  𝗕𝗢𝗧𝗡𝗔𝗠𝗘 』\n`;
        formattedResponse += `✧ ${boldText("NIŞHİMİYA")} \n`;
        formattedResponse += `╰───────────◊\n\n`;

        let currentLetter = '';
        for (const command of allCommands) {
            const firstLetter = command.charAt(0).toUpperCase();
            if (firstLetter !== currentLetter) {
                if (currentLetter !== '') {
                    formattedResponse += `╰───────────◊\n\n`;
                }
                currentLetter = firstLetter;
                formattedResponse += `╭──『  ${firstLetter} cmds 』\n`;
            }
            formattedResponse += `✧${command} `;
        }

        formattedResponse += `\n╰───────────◊\n\n`;
        formattedResponse += `├───────⭔\n » Currently, the bot has (${commands.size}) commands that can be used\n`;

        await message.reply(formattedResponse);
    },

    getCommandInfo: async function (commandName) {
        const command = commands.get(commandName);
        
        if (command) {
            const { config } = command;
            const guideBody = config.guide?.en || config.guide?.["en"] || '';

            return {
                name: config.name,
                version: config.version,
                author: config.author || 'Unknown',
                aliases: (config.aliases || []).join(', ') || 'None',
                groupAliases: (config.groupAliases || []).join(', ') || 'None',
                role: config.role,
                roleText: getRoleText(config.role),
                countDown: config.countDown || 1,
                usage: guideBody.split('\n').map(line => `• ${line}`).join('\n') || 'No usage information available',
                description: config.longDescription?.en || 'No details available'
            };
        } else {
            return null;
        }
    }
};

function boldText(text) {
    return `𝙉𝙄𝙎𝙃𝙄𝙈𝙄𝙔𝘼 𓃝`;
}

function getRoleText(role) {
    switch (role) {
        case 0: return '0 (All users)';
        case 1: return '1 (Group administrators)';
        case 2: return '2 (Admin bot)';
        default: return 'Do not have';
    }
}
