const axios = require("axios");
const path = require("path");
const fs = require("fs-extra");
const { getPrefix } = global.utils;
const { commands, aliases } = global.GoatBot;
const doNotDelete = null;

module.exports = {
  config: {
    name: "help",
    version: "1.0",
    author: "NTKhang | Rehat86",
    countDown: 5,
    role: 0,
    category: "info",
    guide: {
      en: "{pn} [empty or <command name>] [-s <category>]"
    },
    priority: 1
  },

  langs: {
    en: {
      help: `╔═══════════╗
    𝗡𝗶𝘀𝗵𝗶𝗺𝗶𝘆𝗮 𝗖𝗵𝗮𝘁𝗯𝗼𝘁
╚═══════════╝

╭──『  𝗢𝗪𝗡𝗘𝗥  』
 ✧adminonly ✧approved 
 ✧backupdata ✧bin 
 ✧bio ✧bot ✧spam
 ✧cmd ✧code ✧deletecmd
 ✧devonly  ✧edit6
 ✧edit8 ✧editx ✧event
 ✧file ✧getfbstate 
 ✧hubble ✧ignoreonlyad 
 ✧ignoreonlyadbox 
 ✧jsontomongodb 
 ✧listbox ✧loadconfig
 ✧notice ✧notification
 ✧owner ✧owner2 ✧respect 
 ✧setavt ✧setlang 
 ✧setrankup ✧thread ✧up 
 ✧update ✧upt ✧upt2 ✧upt3 
 ✧user ✧vip ✧w
 ✧w4 ✧resetprefix ✧setalias
╰────────────◊

╭──『  𝗔𝗗𝗠𝗜𝗡  』
 ✧block ✧leave ✧main 
 ✧automaticaccept
 ✧usage ✧out ✧ping 
 ✧addfile ✧autoget 
 ✧chekjson ✧delete ✧stats 
 ✧adminlist ✧testhtml
 ✧uptime ✧uptime2 
 ✧autoseen ✧clean ✧eval 
 ✧join ✧shell 
 ✧goatbotcommandcreate 
 ✧example 
 ✧goatmart ✧restart
╰────────────◊

╭──『  𝗜𝗠𝗔𝗚𝗘  』
 ✧affect ✧arrest ✧avatar
 ✧banner ✧batslap ✧blink
 ✧Chad ✧coupledp ✧cover 
 ✧ephoto ✧giphy ✧horror
 ✧imgsearch ✧imgur ✧link
 ✧mpanel ✧pin ✧pr
 ✧profile ✧prompt 
 ✧sorthelp ✧spy
 ✧template ✧trigger
 ✧ws ✧cover2
╰────────────◊

╭──『 𝗧𝗢𝗢𝗟'𝗦  』
 ✧fakechat ✧memberlist 
 ✧qrcode ✧wish ✧namaj 
 ✧ocr ✧owners ✧clonevoice 
 ✧ownerx ✧prefix ✧qr ✧nn
 ✧fbaccount ✧system 
 ✧rembg ✧home ✧support 
 ✧muptime ✧weather 
 ✧emojimean ✧post
 ✧apimarket ✧device
 ✧theme ✧tag ✧font
 ✧countryinfo ✧botstats 
 ✧deldatabase ✧bday 
 ✧fbcover ✧ analytics
 ✧testjs ✧antiout ✧ip 
 ✧appstore ✧devicetop
╰────────────◊

╭──『  𝗙𝗨𝗡  』
 ✧ball ✧biden ✧cat
 ✧card ✧clown ✧drip 
 ✧duck ✧elon ✧emojimix 
 ✧emojistory ✧fact 
 ✧flirt ✧hack ✧impress 
 ✧inbox ✧joke2 ✧love 
 ✧mark ✧married ✧myfact 
 ✧myquote ✧nokia 
 ✧notify ✧obama 
 ✧propose ✧quote ✧quotes 
 ✧randomcatname ✧rip
 ✧rizz ✧sad ✧spiderman 
 ✧anya ✧kiss2 ✧meme 
 ✧taylorquote ✧tes 
 ✧train ✧wishcard 
 ✧content ✧hell ✧joke 
╰────────────◊

╭──『 𝗚𝗔𝗠𝗘  』
 ✧aniquiz ✧candycrush 
 ✧dhbc ✧dice ✧tof
 ✧dicedash ✧frogjump 
 ✧guessactor✧playcard 
 ✧guessnumber 
 ✧memorygame ✧daily 
 ✧penalty ✧riddle 
 ✧quiz ✧fight 
 ✧tictactoe ✧tod ✧ttt 
 ✧coinflip ✧tttv2
 ✧tttvx ✧uncrossable 
 ✧wordguess ✧worker
 ✧xcup ✧slot 
 ✧truthordare ✧country
 ✧slot ✧fish ✧goingmarry
╰────────────◊

╭──『 𝗕𝗢𝗫-𝗖𝗛𝗔𝗧 』
 ✧adduser ✧admin ✧ads
 ✧all ✧antichangeinfobox 
 ✧autosetname ✧badwords 
 ✧ban ✧busy ✧count 
 ✧filteruser ✧gay ✧kick 
 ✧membercount✧menu 
 ✧nncheck✧onlyadminbox 
 ✧refresh ✧rules 
 ✧sendnoti ✧setname
 ✧unsend ✧warn 
 ✧spamban ✧spygc
╰────────────◊

╭──『 𝗨𝗧𝗜𝗟𝗜𝗧𝗬  』
 ✧album ✧amvquote
 ✧bibleverse ✧cmdstore 
 ✧connectgc ✧image ✧imgbb 
 ✧inf ✧ipshow ✧monitor 
 ✧note ✧sendwebhook 
 ✧translate ✧upscaleai 
 ✧v2a ✧view ✧word ✧smg 
 ✧ss ✧tempmail ✧tg 
╰────────────◊

╭──『 𝗙𝗨𝗡-𝟮 』
 ✧berojgar  ✧dance 
 ✧fun ✧fun2 ✧cm
╰────────────◊

╭──『 𝗨𝗧𝗜𝗟𝗜𝗧𝗬-𝟮  』
 ✧accept ✧avatar1 ✧bc
 ✧calendar ✧cricket 
 ✧gmage ✧pastebin 
 ✧requestmain ✧short
╰────────────◊

╭──『  𝗜𝗡𝗙𝗢  』
 ✧cbin ✧info ✧stalk
╰────────────◊

╭──『 𝗙𝗢𝗢𝗧𝗕𝗔𝗟𝗟  』
 ✧messi ✧neymar ✧ramos
 ✧ronaldo
╰────────────◊

╭──『  𝗗𝗘𝗩𝗘𝗟𝗢𝗣𝗘𝗥  』
 ✧scrape ✧whitelist 
 ✧whitelistthread
╰────────────◊

╭──『  𝗠𝗘𝗠𝗘  』
 ✧sciencememe ✧smeme 
 ✧buttslap ✧cry 
 ✧gname ✧trash 
 ✧wanted
 ✧programmingmeme 
╰────────────◊

╭──『  𝗧𝗧𝗦  』
 ✧say  ✧anya2
╰────────────◊

╭──『  𝗦𝗧𝗨𝗗𝗬  』
 ✧advice ✧fact 
 ✧motivation 
 ✧motivation2
╰────────◊

╭──『  𝗚𝗥𝗢𝗨𝗣  』
 ✧spamkick ✧top ✧topxp
╰────────────◊

╭───『  𝗔𝗡𝗜𝗠𝗘 』
 ✧anigif ✧animeinfo 
 ✧animequotes ✧aniwatch
 ✧animetrend ✧anitrace
 ✧anivoice ✧one-piece
 ✧bleach ✧jjk ✧manga
 ✧anime ✧xenoz ✧mangadex
 ✧mangaread ✧quote2 
 ✧waifux ✧art ✧animegirl 
 ✧naruinfo ✧opinfo 
 ✧bleachinfo ✧anistatus 
 ✧aniblur ✧aniedit 
 ✧animetime ✧twixtor 
 ✧anipic
╰────────────◊

╭──『  𝗘𝗖𝗢𝗡𝗢𝗠𝗬  』
 ✧balance ✧money ✧resetbal
 ✧coin ✧richest ✧set
 ✧bank ✧currequest 
╰────────────◊

╭──『  𝗧𝗘𝗫𝗧𝗣𝗥𝗢  』
 ✧khaby ✧willsmith ✧quote3
╰────────────◊

╭─『 𝗖𝗢𝗡𝗧𝗥𝗔𝗖𝗧 』
 ✧callad  ✧botgc 
 ✧supportgc
╰────────────◊

╭──『  𝗠𝗨𝗦𝗜𝗖  』
 ✧animesong ✧audio 
 ✧media ✧sing ✧spotify 
 ✧voicify ✧youtubex 
╰────────────◊

╭──『  𝗟𝗢𝗚𝗢  』
 ✧cardinfo ✧cardinfo2 
╰────────────◊

╭──『  𝗠𝗘𝗗𝗜𝗔 』
 ✧autolink ✧chords 
 ✧convert ✧getlink2
 ✧github ✧lv 
 ✧lyrics ✧singx ✧anya2 
 ✧collab ✧tiktok ✧pmvd 
 ✧pubgedit ✧overlay 
 ✧youtube ✧ytb ✧alldl 
 ✧getlink ✧moviedl 
 ✧song ✧video
╰────────────◊

╭───『 𝗟𝗢𝗩𝗘 』
 ✧cdp ✧kiss ✧pair2 
 ✧pair3 ✧ship ✧us ✧cdp2
╰────────────◊

╭───『  𝗦𝗢𝗖𝗜𝗔𝗟  』
 ✧fbpost ✧fbreport ✧fbshare
╰────────────◊

╭──『  𝗔𝗜 𝗖𝗛𝗔𝗧 』
 ✧ask ✧clips ✧gemini 
 ✧geminiv2 ✧gen 
 ✧gojo ✧gpt ✧hina ✧roast 
 ✧snoop ✧bby ✧boxai ✧ai
 ✧hinu ✧yamato ✧smsg
╰────────────◊

╭──『 𝗚𝗙𝗫 』
 ✧gfx  ✧gfx2 ✧gfx3 
╰────────────◊

╭──『 𝗔𝗜-𝗚𝗘𝗡𝗘𝗥𝗔𝗧𝗘𝗗 』
 ✧prompt3 ✧imagejourney 
 ✧dallex  ✧imaginex 
 ✧imagine ✧genx ✧sdxl 
 ✧niji ✧nijiz ✧alya
 ✧realis ✧imagine
 ✧fluxv2 ✧emi ✧gen 
 ✧nixi ✧xl31 ✧ poli
 ✧nigi ✧xl30 ✧flux ✧mgen 
 ✧reality ✧xl ✧nijiv5
 ✧fluxv2 ✧nijiv6 ✧xl4
 ✧alya2 ✧xs ✧niji5
 ✧flux2 ✧niji6 ✧ xl2
 ✧wc(prompt) 
╰────────────◊

╭──『 𝗣𝗢𝗞𝗘𝗠𝗢𝗡 』
 ✧pokebot    ✧pokeinfo 
 ✧pokechamps ✧pokedex 
 ✧poketrade
╰────────────◊

╭──『 𝗖𝗨𝗦𝗧𝗢𝗠 』
 ✧setleave ✧setwelcome 
 ✧shortcut
╰────────────◊

╭──『 𝗪𝗔𝗜𝗙𝗨 𝗚𝗔𝗠𝗘 』
 ✧waifulist ✧waifutop
 ✧waifuinfo ✧waifuinv 
 ✧waifupull ✧waifudex 
 ✧waifusellall
╰────────────◊

╭──『  𝗥𝗔𝗡𝗞  』
 ✧customrankcard ✧rank 
 ✧ranktop ✧rankup 
 ✧ranking
╰────────────◊

━━━ 𝗦𝗨𝗣𝗣𝗢𝗥𝗧 𝗕𝗢𝗫 ━━━
join Nisimiya Bot Zone ❈ Support Box type: !supportgc or type: !callad to contact with admins.

⇒ Total: 412 commands
⇒ Use /help <cmd> to get more information about a command and /helpx a ( to see a specific cmd)`, // Keep the existing help text as it is
      commandNotFound: "Command \"%1\" does not exist",
      getInfoCommand: "» Description: %2\n» Other names: %3\n» Other names in your group: %4\n» Version: %5\n» Role: %6\n» Time per command: %7s\n» Author: %8\n━━━  ❖  ━━━\n» Usage guide:\n%9\n━━━  ❖  ━━━\n» Notes:\n• The content inside <XXXXX> can be changed\n• The content inside [a|b|c] is a or b or c",
      onlyInfo: "━━━  ❖  ━━━\n│ Command name: %1\n│ Description: %2\n│ Other names: %3\n│ Other names in your group: %4\n│ Version: %5\n│ Role: %6\n│ Time per command: %7s\n│ Author: %8\n❖─────────────❖",
      onlyUsage: "❖── USAGE ────❖\n│%1\n❖─────────────❖",
      onlyAlias: "❖── ALIAS ────❖\n│ Other names: %1\n│ Other names in your group: %2\n❖─────────────❖",
      onlyRole: "❖── ROLE ────❖\n│%1\n❖─────────────❖",
      doNotHave: "Do not have",
      roleText0: "0 (All users)",
      roleText1: "1 (Group administrators)",
      roleText2: "2 (Admin bot)",
      roleText0setRole: "0 (set role, all users)",
      roleText1setRole: "1 (set role, group administrators)",
      pageNotFound: "Page %1 does not exist",
      totalCategoryCommands: "Total %1 commands in category %2:"
    }
  },

  onStart: async function ({ message, args, event, threadsData, getLang, role, api, usersData}) {

    const langCode = await threadsData.get(event.threadID, "data.lang") || global.GoatBot.config.language;
    let customLang = {};
    const pathCustomLang = path.join(__dirname, "..", "..", "languages", "cmds", `${langCode}.js`);
    if (fs.existsSync(pathCustomLang))
      customLang = require(pathCustomLang);
    const { threadID } = event;
    const threadData = await threadsData.get(threadID);
    const prefix = getPrefix(threadID);
    let sortHelp = threadData.settings.sortHelp || "name";
    if (!["category", "name"].includes(sortHelp))
      sortHelp = "name";
    const commandName = (args[0] || "").toLowerCase();
    const command = commands.get(commandName) || commands.get(aliases.get(commandName));

    // ———————————————— LIST COMMANDS BY CATEGORY (SHORT OPTION) ——————————————— //
    if (args[0] === "-s" && args[1]) {
      const category = args[1].toLowerCase();
      const arrayInfo = [];
      for (const [name, value] of commands) {
        if (value.config.category && value.config.category.toLowerCase().startsWith(category) && (value.config.role <= role || value.config.role == undefined)) {
          let describe = name;
          let shortDescription;
          const shortDescriptionCustomLang = customLang[name]?.shortDescription;
          if (shortDescriptionCustomLang != undefined)
            shortDescription = checkLangObject(shortDescriptionCustomLang, langCode);
          else if (value.config.shortDescription)
            shortDescription = checkLangObject(value.config.shortDescription, langCode);
          if (shortDescription)
            describe += `: ${cropContent(shortDescription.charAt(0).toUpperCase() + shortDescription.slice(1))}`;
          arrayInfo.push(describe);
        }
      }
      const total = arrayInfo.length;
      const msg = `${getLang("totalCategoryCommands", total, category)}\n\n${arrayInfo.join("\n")}`;
      return message.reply(msg);
    }

    // ———————————————— LIST ALL COMMAND ——————————————— //
    if (!command && !args[0] || !isNaN(args[0])) {
      const arrayInfo = [];
      let msg = "";
      if (sortHelp == "name") {
        const page = parseInt(args[0]) || 1;
        const numberOfOnePage = 30;
        for (const [name, value] of commands) {
          if (value.config.role > 1 && role < value.config.role)
            continue;
          let describe = name;
          let shortDescription;
          const shortDescriptionCustomLang = customLang[name]?.shortDescription;
          if (shortDescriptionCustomLang != undefined)
            shortDescription = checkLangObject(shortDescriptionCustomLang, langCode);
          else if (value.config.shortDescription)
            shortDescription = checkLangObject(value.config.shortDescription, langCode);
          if (shortDescription)
            describe += `: ${cropContent(shortDescription.charAt(0).toUpperCase() + shortDescription.slice(1))}`;
          arrayInfo.push({
            data: describe,
            priority: value.priority || 0
          });
        }
        arrayInfo.sort((a, b) => a.data - b.data);
        arrayInfo.sort((a, b) => a.priority > b.priority ? -1 : 1);
        const { allPage, totalPage } = global.utils.splitPage(arrayInfo, numberOfOnePage);
        if (page < 1 || page > totalPage)
          return message.reply(getLang("pageNotFound", page));
        const returnArray = allPage[page - 1] || [];
        const startNumber = (page - 1) * numberOfOnePage + 1;
        msg += (returnArray || []).reduce((text, item, index) => text += `│ ${index + startNumber}${index + startNumber < 10 ? " " : ""}. ${item.data}\n`, '').slice(0, -1);
        await message.reply(getLang("help", msg, page, totalPage, commands.size, prefix, doNotDelete));
      };
    }
    // ———————————— COMMAND DOES NOT EXIST ———————————— //
    else if (!command && args[0]) {
      return message.reply(getLang("commandNotFound", args[0]));
    }
    // ————————————————— INFO COMMAND ————————————————— //
    else {
      const formSendMessage = {};
      const configCommand = command.config;

      let guide = configCommand.guide?.[langCode] || configCommand.guide?.["en"];
      if (guide == undefined)
        guide = customLang[configCommand.name]?.guide?.[langCode] || customLang[configCommand.name]?.guide?.["en"];

      guide = guide || {
        body: ""
      };
      if (typeof guide == "string")
        guide = { body: guide };
      const guideBody = guide.body
        .replace(/\{prefix\}|\{p\}/g, prefix)
        .replace(/\{name\}|\{n\}/g, configCommand.name)
        .replace(/\{pn\}/g, prefix + configCommand.name);

      const aliasesString = configCommand.aliases ? configCommand.aliases.join(", ") : getLang("doNotHave");
      const aliasesThisGroup = threadData.data.aliases ? (threadData.data.aliases[configCommand.name] || []).join(", ") : getLang("doNotHave");

      let roleOfCommand = configCommand.role;
      let roleIsSet = false;
      if (threadData.data.setRole?.[configCommand.name]) {
        roleOfCommand = threadData.data.setRole[configCommand.name];
        roleIsSet = true;
      }

      const roleText = roleOfCommand == 0 ?
        (roleIsSet ? getLang("roleText0setRole") : getLang("roleText0")) :
        roleOfCommand == 1 ?
          (roleIsSet ? getLang("roleText1setRole") : getLang("roleText1")) :
          getLang("roleText2");

      const author = configCommand.author;
      const descriptionCustomLang = customLang[configCommand.name]?.longDescription;
      let description = checkLangObject(configCommand.longDescription, langCode);
      if (description == undefined)
        if (descriptionCustomLang != undefined)
          description = checkLangObject(descriptionCustomLang, langCode);
          else if (value.config.shortDescription)
            shortDescription = checkLangObject(value.config.shortDescription, langCode);
          if (shortDescription)
            describe += `: ${cropContent(shortDescription.charAt(0).toUpperCase() + shortDescription.slice(1))}`;
          arrayInfo.push({
            data: describe,
            priority: value.priority || 0
          });
        }
        arrayInfo.sort((a, b) => a.data - b.data);
        arrayInfo.sort((a, b) => a.priority > b.priority ? -1 : 1);
        const { allPage, totalPage } = global.utils.splitPage(arrayInfo, numberOfOnePage);
        if (page < 1 || page > totalPage)
          return message.reply(getLang("pageNotFound", page));
        const returnArray = allPage[page - 1] || [];
        const startNumber = (page - 1) * numberOfOnePage + 1;
        msg += (returnArray || []).reduce((text, item, index) => text += `│ ${index + startNumber}${index + startNumber < 10 ? " " : ""}. ${item.data}\n`, '').slice(0, -1);
        await message.reply(getLang("help", msg, page, totalPage, commands.size, prefix, doNotDelete));
      };
    }
    // ———————————— COMMAND DOES NOT EXIST ———————————— //
    else if (!command && args[0]) {
      return message.reply(getLang("commandNotFound", args[0]));
    }
    // ————————————————— INFO COMMAND ————————————————— //
    else {
      const formSendMessage = {};
      const configCommand = command.config;

      let guide = configCommand.guide?.[langCode] || configCommand.guide?.["en"];
      if (guide == undefined)
        guide = customLang[configCommand.name]?.guide?.[langCode] || customLang[configCommand.name]?.guide?.["en"];

      guide = guide || {
        body: ""
      };
      if (typeof guide == "string")
        guide = { body: guide };
      const guideBody = guide.body
        .replace(/\{prefix\}|\{p\}/g, prefix)
        .replace(/\{name\}|\{n\}/g, configCommand.name)
        .replace(/\{pn\}/g, prefix + configCommand.name);

      const aliasesString = configCommand.aliases ? configCommand.aliases.join(", ") : getLang("doNotHave");
      const aliasesThisGroup = threadData.data.aliases ? (threadData.data.aliases[configCommand.name] || []).join(", ") : getLang("doNotHave");

      let roleOfCommand = configCommand.role;
      let roleIsSet = false;
      if (threadData.data.setRole?.[configCommand.name]) {
        roleOfCommand = threadData.data.setRole[configCommand.name];
        roleIsSet = true;
      }

      const roleText = roleOfCommand == 0 ?
        (roleIsSet ? getLang("roleText0setRole") : getLang("roleText0")) :
        roleOfCommand == 1 ?
          (roleIsSet ? getLang("roleText1setRole") : getLang("roleText1")) :
          getLang("roleText2");

      const author = configCommand.author;
      const descriptionCustomLang = customLang[configCommand.name]?.longDescription;
      let description = checkLangObject(configCommand.longDescription, langCode);
      if (description == undefined)
        if (descriptionCustomLang != undefined)
          description = checkLangObject(descriptionCustomLang, langCode);
        else
          description = getLang("doNotHave");

      let sendWithAttachment = false;

      if (args[1]?.match(/^-g|guide|-u|usage$/)) {
        formSendMessage.body = getLang("onlyUsage", guideBody.split("\n").join("\n"));
        sendWithAttachment = true;
      }
      else if (args[1]?.match(/^-a|alias|aliase|aliases$/))
        formSendMessage.body = getLang("onlyAlias", aliasesString, aliasesThisGroup);
      else if (args[1]?.match(/^-r|role$/))
        formSendMessage.body = getLang("onlyRole", roleText);
      else if (args[1]?.match(/^-i|info$/))
        formSendMessage.body = getLang("onlyInfo", configCommand.name, description, aliasesString, aliasesThisGroup, configCommand.version, roleText, configCommand.countDown || 1, author || "");
      else {
        formSendMessage.body = getLang("getInfoCommand", configCommand.name, description, aliasesString, aliasesThisGroup, configCommand.version, roleText, configCommand.countDown || 1, author || "", `${guideBody.split("\n").join("\n")}`);
        sendWithAttachment = true;
      }

      if (sendWithAttachment && guide.attachment) {
        if (typeof guide.attachment == "object") {
          formSendMessage.attachment = [];
          for (const pathFile in guide.attachment) {
            if (!fs.existsSync(pathFile)) {
              const cutFullPath = pathFile.split("/").filter(item => item != "");
              cutFullPath.pop();
              for (let i = 0; i < cutFullPath.length; i++) {
                const path = cutFullPath.slice(0, i + 1).join('/');
                if (!fs.existsSync(path))
                  fs.mkdirSync(path);
              }
              const getFile = await axios.get(guide.attachment[pathFile], { responseType: 'arraybuffer' });
              fs.writeFileSync(pathFile, Buffer.from(getFile.data));
            }
            formSendMessage.attachment.push(fs.createReadStream(pathFile));
          }
        }
      }
      return message.reply(formSendMessage);
    }
  }
};

function checkLangObject(data, langCode) {
  if (typeof data == "string")
    return data;
  if (typeof data == "object" && !Array.isArray(data))
    return data[langCode] || data.en || undefined;
  return undefined;
}

function cropContent(content, max) {
  if (content.length > max) {
    content = content.slice(0, max - 3);
    content = content + "...";
  }
  return content;
}
