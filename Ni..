const fs = require('fs');
const path = require('path');
const sharp = require('sharp');
const axios = require('axios');
const FormData = require('form-data');

const tokenKeyList = {
  "keys": [
 "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzZWEtYXJ0IiwiYXVkIjpbImxvZ2luIl0sImV4cCI6MTcyNzU0OTk1NCwiaWF0IjoxNzIyMzY1OTU0LCJqdGkiOiI0NjE1Mzc2MzA0MzQxNzA5MyIsInBheWxvYWQiOnsiaWQiOiIzZjVhYmQ3NmY2MjdkNmI1MDUwNTE4ZWIwZjI0YzIwYiIsImVtYWlsIjoiIiwiY3JlYXRlX2F0IjoxNzE2MDk2MDc5NjU5LCJ0b2tlbl9zdGF0dXMiOjAsInN0YXR1cyI6MX19.S1UAapuOxaKFvcesohIQLCTYrEklPzRMVAD7b8EZQNzXd0w1fEGOpXIR5Rj-xHDTQrnxApXQ5AC8OOOSMpfwInL83C07qc8iw6ER5kzleZKBFYkp7l486dqfdGIvTm923o1b3vRlLmAcW2qhkI5n8ahTe0B0aMNeHrn9vtkbw-PfjUBEcdG-lC7MI8oSBh63x8tt3eN9eR5xfILeqnbgV5q2IOmiMU38EgUeBEP9lCEdNjxvnr9_jBdqRXPHX5ozN8oWaDLfU5OoJW2ykLfjp7k45QTAVD9fTI6gXiIZ3qn5t0NvoCjRSS5kzAKXY8sNNBjoSZFJCV01agN6EojATQ"
    ],
};

function getRandomKey() {
  const randomIndex = Math.floor(Math.random() * tokenKeyList.keys.length);
  return tokenKeyList.keys[randomIndex];
}

const workplace = 'cnrqij5e878c73ea5cjg';
const token = getRandomKey();
const headers = {
    'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1',
    'Token': token,
};
const cookies = `lang=en; T=${token}`;
const supportedAr = {
    "1:1": { height: 1024, width: 1024 },
    "9:7": { height: 896, width: 1152 },
    "7:9": { height: 1152, width: 896 },
    "19:13": { height: 1216, width: 832 },
    "13:19": { height: 832, width: 1216 },
    "7:4": { height: 1344, width: 768 },
    "4:7": { height: 768, width: 1344 },
    "12:5": { height: 1536, width: 640 },
    "5:12": { height: 640, width: 1536 },
    "16:9": { height: 720, width: 1280 },
    "9:16": { height: 1280, width: 720 },
    "4:3": { height: 768, width: 1024 },
    "3:4": { height: 1024, width: 768 },
    "3:2": { height: 960, width: 1440 },
    "2:3": { height: 1440, width: 960 },
    "5:4": { height: 800, width: 1000 },
    "4:5": { height: 1000, width: 800 },
    "21:9": { height: 720, width: 1680 },
    "9:21": { height: 1680, width: 720 },
    "18:9": { height: 720, width: 1440 },
    "9:18": { height: 1440, width: 720 },
    "3:1": { height: 480, width: 1440 },
    "1:3": { height: 1440, width: 480 }
};

async function createTask(prompt, aspectRatio, style, preset) {
    try {
        const presets = {
            "0": {
                "name": "0",
                "prompt": `${prompt}, ((medium quality))`
            },
            "1": {
                "name": "1",
                "prompt": `${prompt}, masterpiece, best quality`
            },
            "2": {
                "name": "2",
                "prompt": `${prompt}, masterpiece, best quality, very aesthetic, absurdres`
                },
            "3": {
                "name": "3",
                "prompt": `${prompt}, (masterpiece), best quality, very aesthetic, perfect face`
            },
            "4": {
                "name": "4",
                "prompt": `${prompt}, (masterpiece), (best quality), (ultra-detailed), very aesthetic, illustration, disheveled hair, perfect composition, moist skin, intricate details`
            }
        };
        
        const styles = [
            {
                "name": "0",
                "prompt": '((medium quality))'
            },
            {
                "name": "1",
                "prompt": `${prompt}, cinematic still, emotional, harmonious, vignette, highly detailed, high budget, bokeh, cinemascope, moody, epic, gorgeous, film grain, grainy, perfect eyes, exclusive eyes`,
            },
            {
                "name": "2",
                "prompt": `${prompt}, cinematic photo, 35mm photograph, film, bokeh, professional, 4k, highly detailed, perfect eyes, exclusive eyes`
            },
            {
                "name": "3",
                "prompt": `${prompt}, anime artwork, anime style, key visual, vibrant, studio anime, highly detailed, perfect eyes, exclusive eyes`
            },
            {
                "name": "4",
                "prompt": `${prompt}, manga style, vibrant, high-energy, detailed, iconic, Japanese comic style, perfect eyes, exclusive eyes`
            },
            {
                "name": "5",
                "prompt": `${prompt}, concept art, digital artwork, illustrative, painterly, matte painting, highly detailed, perfect eyes, exclusive eyes`
            },
            {
                "name": "6",
                "prompt": `${prompt}, pixel-art, low-res, blocky, pixel art style, 8-bit graphics, perfect eyes, exclusive eyes`
            },
            {
                "name": "7",
                "prompt": `${prompt}, ethereal fantasy concept art, magnificent, celestial, ethereal, painterly, epic, majestic, magical, fantasy art, cover art, dreamy, perfect eyes, exclusive eyes`,
            },
            {
                "name": "8",
                "prompt": `${prompt}, neonpunk style, cyberpunk, vaporwave, neon, vibes, vibrant, stunningly beautiful, crisp, detailed, sleek, ultramodern, magenta highlights, dark purple shadows, high contrast, cinematic, ultra detailed, intricate, professional, perfect eyes, exclusive eyes`,
            },
            {
                "name": "9",
                "prompt": `${prompt}, professional 3d model, octane render, highly detailed, volumetric, dramatic lighting, perfect eyes, exclusive eyes`
            },
        ];
        const selectedPreset = preset ? parseInt(preset) : 0;
        const selectedPresetData = presets[selectedPreset] || presets[0]; 
        const updatedPrompt = selectedPresetData.prompt.replace("${prompt}", prompt);

        let selectedStyleData;
        if (style !== undefined) {
            selectedStyleData = styles.find(s => s.name === style.toString()) || styles[0];
        } else {
            selectedStyleData = styles[0]; 
        }

        const mergedPrompt = `${updatedPrompt}, ${selectedStyleData.prompt}`;
        const url = 'https://www.seaart.ai/api/v1/task/create';
        const ar = supportedAr[aspectRatio];
        if (!ar) {
            throw new Error('Unsupported aspect ratio.');
            console.log('[ NIJI V2 ]: Unsupported aspect ratio.');
        }

        const payload = {
            "art_work_no": workplace ,
            "art_model_no": "f2755cd95dd840080d622ca62e381fc8",
            "art_model_ver_no": "65920c86-0c1f-47f0-a337-8c637b5eb0f4",
            "action": 1,
            "category": 5,
            "channel_id": "",
            "meta": {
                "prompt": mergedPrompt,
                "width": ar.width,
                "height": ar.height,
                "steps": 50,
                "cfg_scale": 7,
                "sdxl": {
                    "prompt_magic": 0.8,
                    "width": ar.width,
                    "height": ar.height
                },
                "n_iter": 1,
                "sampler_name": "DPM++ 2M Karras",
                "lora_models": [
                    {
                        "model_id": "a0587e7fbfbb401729971c5a9588c45d",
                        "weight": 0.75,
                        "id": "a0587e7fbfbb401729971c5a9588c45d",
                        "banner": {
                            "width": 1280,
                            "height": 720,
                            "url": "https://image.cdn2.seaart.ai/static/a5c51bfa49b475ab04fa3087957d6469/20231008/34e0ead1476fb9c9d6cff6a64f6f7c64.jpeg",
                            "nsfw": 2,
                            "is_nsfw_plus": false
                        },
                        "author": {
                            "id": "w4r10ck",
                            "head": "",
                            "is_follow": false,
                            "name": "w4r10ck",
                            "status": 1,
                            "follower_cnt": 6,
                            "is_active": false,
                            "join_stimulate": 0
                        },
                        "account_no": "w4r10ck",
                        "name": "Detail Tweaker XL",
                        "nsfw": 0,
                        "model_ver_no": "c0eb4bd4aaf66b58ba77d70e807e0559",
                        "version_name": "v1.0",
                        "tags": null,
                        "type": "LORA",
                        "status": 1,
                        "stat": {
                            "num_of_like": 249,
                            "num_of_collection": 400,
                            "num_of_task": 89631,
                            "num_of_view": 0,
                            "rating": 0
                        },
                        "collect": null,
                        "base_model": "SDXL 1.0",
                        "publish_status": 1,
                        "primary": 0,
                        "is_agency_fee": false,
                        "agency_fee": 0,
                        "payment_way": 0,
                        "channel": 5,
                        "channel_type": "",
                        "rank_score": 0
                    },
                    {
                        "model_id": "6e2294c4cf7ee97c38f1e1ed9fda9f09",
                        "weight": 0.9,
                        "id": "6e2294c4cf7ee97c38f1e1ed9fda9f09",
                        "banner": {
                            "width": 1152,
                            "height": 1536,
                            "url": "https://image.cdn2.seaart.ai/static/a2314a16f4c70cf17d279d2bd4e4ec84/20230809/e27176d07ddb4779aa68458e5e7ba9af.jpeg",
                            "nsfw": 0,
                            "is_nsfw_plus": false
                        },
                        "account_no": "ledadu",
                        "name": "xl_more_art-full / xl_real / Enhancer",
                        "nsfw": 0,
                        "model_ver_no": "6287c0b81ff1790af015933c16581f8f",
                        "version_name": "xl_more_art-full-v1",
                        "type": "LORA",
                        "status": 1,
                        "base_model": "SDXL 1.0",
                        "sample_ids": [
                            "164a9ab7b0a85bf37dce60cae78556b0",
                            "30487e83fabec2dfeb9747e1c8376b6e",
                            "1f7b1476bb9c801be0e3e46bcc8b3e96",
                            "843179384dcc98ab1bb16db125abfceb",
                            "991289ec11bb7ad43bdddbab74a71093",
                            "1c38c2f9f8f9f7be74fd3cb1727bc3ae",
                            "d461844201cb1296c29a53aa17b86981",
                            "ee9c1dcf0bcf41638d5d331943501c46",
                            "9068ec2c7ed42723d8b7cbba8fa3da51",
                            "565ae8ee722817ad568f2f1a02550dc4"
                        ],
                        "is_agency_fee": false,
                        "agency_fee": 0,
                        "payment_way": 0,
                        "publish_status": 1
                    }
                ],
                "negative_prompt": "nsfw, lowres, (bad), text, error, fewer, extra, missing, worst quality, jpeg artifacts, low quality, watermark, unfinished, displeasing, oldest, early, chromatic aberration, signature, extra digits, artistic error, username, scan, [abstract]",
                "vae": "sdxl_vae",
                "clip_skip": 2,
                "refiner_mode": 0,
                "refiner_switch_at": 0.8,
                "lcm_mode": 0,
                "denoising_strength": 0.5
            },
            "speed_type": 2
        };

        const response = await axios.post(url, payload, { headers, cookies });
        return response.data;
    } catch (error) {
        console.error('[ NIJI V2 ]:', error.message);
        return null;
    }
}

async function getProcessInfo(taskId) {
    try {
        const url = 'https://www.seaart.ai/api/v1/task/batch-progress';
        const payload = { "task_ids": [taskId] };

        const response = await axios.post(url, payload, { headers, cookies });
        return response.data;
    } catch (error) {
        console.error('[ NIJI V2 ]:', error.message);
        return null;
    }
}

async function checkProcess(taskId) {
    try {
        let count = 0;
        const maxAttempts = 10;
        const interval = 20000;

        while (count < maxAttempts) {
            const processInfo = await getProcessInfo(taskId);
            if (processInfo && processInfo.data && processInfo.data.items) {
                const item = processInfo.data.items.find(item => item.task_id === taskId);
                if (item && item.status === 3) {
                    return item.img_uris.map(uri => uri.url);
                }
            }
            count++;
            await new Promise(resolve => setTimeout(resolve, interval));
        }

        if (count === maxAttempts) {
            console.log('[ NIJI V2 ]: This take might longer then expected....');
        }
    } catch (error) {
        console.error(error.message);
        return null;
    }
}

async function nijiv2Handler(req, res) {
    try {
        const { prompt, aspectRatio, style, preset, apikey } = req.query;
        if (apikey !== "sumu") {
            return res.status(402).json({ error: "Payment required." });
        }
        const taskResponse = await createTask(prompt, aspectRatio, style, preset);
        if (taskResponse && taskResponse.data && taskResponse.data.id) {
            const taskId = taskResponse.data.id;
            console.log('[ NIJI V2 ]:', taskId);
            const urls = await checkProcess(taskId);

            if (Array.isArray(urls) && urls.length > 0) {
                const url = urls[0];
                const directory = path.join(__dirname, 'cache');
                const webpPath = path.join(directory, `${Date.now()}_nijiv2.webp`);
                const pngPath = path.join(directory, `${Date.now()}_nijiv2.png`);

                if (!fs.existsSync(directory)) {
                    fs.mkdirSync(directory, { recursive: true });
                }

                const writer = fs.createWriteStream(webpPath);
                const imageResponse = await axios.get(url, { responseType: 'stream' });
                imageResponse.data.pipe(writer);
                writer.on('finish', async () => {
                    try { 
                      const imgbbKeyList = {
                       keys: [
                         "5828f3061d1aeffb56c5e68bb8e9e993",
                         "f7dfa6aae7146cf963700f82484125d9",
                         "8ce5d11007979a069d29cfbacc0f48b7",
                         "8690deea4fbffdab8db717a69480ac7e",
                         "6ca118ad46621757cce369d623900f4a",
                         "2c9a5c8e69e1648f970dbc70aef60015"
                      ],
                   };
                   function getRandomImgbbKey() {
                     const randomIndex = Math.floor(Math.random() * imgbbKeyList.keys.length);
                     return imgbbKeyList.keys[randomIndex];
                   }
                        await sharp(webpPath).png().toFile(pngPath);
                        const imgbbApiKey = getRandomImgbbKey();
                        const form = new FormData();
                        form.append('image', fs.createReadStream(pngPath));

                        const imgbbResponse = await axios.post(`https://api.imgbb.com/1/upload?key=${imgbbApiKey}`, form, {
                            headers: {
                                ...form.getHeaders()
                            }
                        });

                        if (imgbbResponse.data && imgbbResponse.data.data && imgbbResponse.data.data.url) {
                            const imgbbUrl = imgbbResponse.data.data.url;
                            const imgbbTinyUrl = await axios.get(`https://tinyurl.com/api-create.php?url=${encodeURIComponent(imgbbUrl)}`);
                          res.status(200).json({ url: imgbbTinyUrl.data });
                          res.on('finish', () => {
                             fs.rm(directory, { recursive: true, force: true }, (err) => {
                                 if (err) {
                                     console.error('[ NIJI V2 ]:', err);
                                 } else {
                                     console.log('[ NIJI V2 ]: Success');
                                 }
                             });
                         });
                          
                        } else {
                            console.log('[ NIJI V2 ]: An error occurred.');
                            res.status(500).json({ error: 'An error occurred.' });
                        }
                    } catch (error) {
                        console.log('[ NIJI V2 ]: An error occurred.');
                        res.status(500).json({ error: 'An error occurred.' });
                    }
                });

                writer.on('error', (err) => {
                    console.log('[ NIJI V2 ]: An error occurred.');
                    res.status(500).json({ error: 'An error occurred.' });
                });
            } else {
                console.log('[ NIJI V2 ]: An error occurred.');
                res.status(500).json({ error: 'An error occurred.' });
            }
        } else {
            console.log('[ NIJI V2 ]: An error occurred.');
            res.status(500).json({ error: 'An error occurred.' });
        }
    } catch (error) {
        console.error('[ NIJI V2 ]:', error.message);
        res.status(500).json({ error: 'An error occurred.' });
    }
}

module.exports = nijiv2Handler;
