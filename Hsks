const axios = require("axios");
const path = require("path");
const fs = require("fs-extra");
const { getPrefix } = global.utils;
const { commands, aliases } = global.GoatBot;
const doNotDelete = null;

module.exports = {
  config: {
    name: "help",
    version: "1.0",
    author: "NTKhang | Rehat86",
    countDown: 5,
    role: 0,
    category: "info",
    guide: {
      en: "{pn} [empty or <command name>]"
    },
    priority: 1
  },

  langs: {
    en: {
      help: `━━━ 𝗔𝗗𝗠𝗜𝗡 𝗢𝗡𝗟𝗬 ━━━
✧Approved ✧approvedmain ✧adboxonly ✧cmdstore ✧edit(1-8) ✧editx ✧post ✧roast ✧scrape ✧Spygc ✧upt2 ✧upt3 ✧upt ✧wish ✧acp ✧addfile ✧adduser ✧ads ✧album ✧all ✧Antiout ✧apimart ✧arkn ✧autoget ✧autoseen ✧pending ✧autosetname ✧Bin ✧Bio ✧block ✧card ✧cardinfo ✧cardinfo2 ✧checkjson ✧clean ✧convert ✧create ✧del ✧deldatabase ✧devonly ✧example ✧fbacc ✧fbpost ✧Fbreport ✧fbshare ✧getfbstate ✧GitHub ✧goatmart ✧hack ✧ignoreonlyad ✧ignoreonlyadbox ✧join ✧jsontomongodb ✧jsontosqlite ✧leave ✧loadconfig ✧menu ✧monitor ✧noti ✧notice ✧notification ✧out ✧owner2 ✧owners ✧ownerx ✧pastebin ✧quizx ✧reminder ✧respect ✧shell ✧spam ✧support ✧system ✧file ✧tes ✧testhtml ✧testjs ✧testgpt ✧undefined ✧vip ✧w ✧w4 ✧ws ✧whitelist ✧whitelisthreadwhitelisthread(wt) 

━━━ 𝗧𝗢𝗢𝗟𝗦 ━━━
✧home ✧guide ✧prompt ✧prompt2 ✧ss ✧pinjourney ✧pinterest ✧uptime ✧translate ✧emojimix ✧emojimean ✧pfp ✧emojistory ✧owner ✧egif ✧getlink ✧getlink2 ✧giphy ✧Imgur ✧say ✧t2s ✧up ✧moviedl ✧Movie ✧Muptime ✧namaj ✧telegraph(tg) ✧voicify ✧age ✧bc ✧bday ✧beast ✧bigtxt ✧bintotext ✧blink ✧gimg ✧Botstats ✧currency ✧define ✧device ✧devicetop ✧ddg ✧dictionary ✧fbcover ✧fbstalk ✧font ✧gcard ✧getinfo ✧gmage ✧idst ✧image ✧imgbb ✧imgsearch ✧imgur ✧inbox ✧instastalk ✧itunes ✧link ✧membercount ✧mbl ✧tag(ta) ✧mlbbstalk ✧ngl ✧nncheck ✧note ✧ocr ✧ip ✧ipshow ✧ping ✧qr ✧qrcode ✧rembg(removebg) ✧search ✧v2a ✧sendwebhook ✧snoop ✧stalk ✧calendar ✧stalkinsta ✧stalktik ✧status ✧summarize ✧time ✧upt3 ✧upscaleai(4k) ✧short ✧upt ✧uptime ✧t2e ✧measurement 

━━━ 𝗙𝗨𝗡  ━━━
✧arrest ✧chad ✧hell ✧pfp ✧khaby ✧hack ✧clown ✧kiss ✧slap ✧spank ✧pair ✧ biden ✧mark ✧obama ✧einstein ✧fakechat ✧cdp ✧osu ✧Voice ✧affect ✧alienrizz ✧ball ✧banner ✧Batslap ✧beauty ✧berojgar ✧Bible ✧blood ✧bored ✧zombie ✧Buttslap ✧catname ✧choose ✧circuit ✧coffee ✧coin ✧coinflip ✧confess ✧coupledp ✧cover ✧cry ✧dog ✧drip ✧duck ✧findgay ✧flirt ✧gay ✧gname ✧gpa ✧impress ✧joke ✧joke2 ✧kiss ✧kiss2 ✧logo ✧love  ✧lyricscard ✧married ✧marry ✧nokia ✧pair(1-4) ✧pickupline ✧propose ✧rip ✧rizz ✧smsg ✧Smith ✧spiderman ✧spy ✧trash ✧trigger ✧trsain ✧ugly ✧us ✧wanted ✧wishcard ✧Willsmith

━━━ 𝗣𝗢𝗞𝗘&𝗪𝗔𝗜𝗙𝗨 ━━━
✧pokebot ✧pokedex ✧pokeinfo ✧poketrade ✧pokechamps ✧waifudex ✧waifudex top  ✧waifudex list ✧waifuinfo 
𝗔𝗡𝗢𝗧𝗛𝗘𝗥 𝗪𝗔𝗜𝗙𝗨 𝗚𝗔𝗠𝗘 
✧waifupull ✧waifuinfo2 ✧waifuinv ✧waifulist ✧waifusell ✧waifusellall ✧waifutrade 

━━━ 𝗚𝗔𝗠𝗘𝗦 ━━━
✧daily ✧bal ✧quiz ✧slot ✧flag ✧ttt ✧wordgame ✧wordguess ✧Actorquiz ✧aniquiz ✧CandyCrush ✧card ✧frogjump ✧memorygame ✧playcard ✧Tod(truth or dare) ✧Lb ✧Dhbc ✧Dice ✧dicedash ✧fight ✧flip ✧fish ✧money ✧pet ✧pubg ✧quest 
✧quiz ✧richest ✧riddle ✧sicbo ✧ship ✧spellingbee ✧tof ✧tttv2 ✧xcup ✧3cup ✧chess

━━━ 𝗚𝗥𝗢𝗨𝗣 ━━━
✧antichangeinfobox ✧filteruser ✧kick ✧adduser ✧uid ✧adminonly ✧warn ✧tid ✧busy ✧count ✧unsend ✧theme ✧setrole ✧setname ✧say ✧prefix ✧setalias ✧connectgc ✧Info ✧NN

━━━ 𝗡𝗶𝘀𝗵𝗶 𝗔𝗜 ━━━
✧Hinu ✧cai ✧gpt ✧bard ✧Gemini ✧History ✧pai
✧Calc ✧gllama ✧gojo ✧google ✧liner ✧math ✧mistral ✧stack ✧tai ✧wiki ✧word ✧dictionary
✧define ✧copilot 

━━━ 𝗔𝗜-𝗚𝗘𝗡𝗘𝗥𝗔𝗧𝗘𝗗 ━━━
✧Imagine ✧niji ✧art ✧xl31 ✧animex ✧animagine ✧dalle ✧emi ✧gen ✧sdxl ✧imaginex ✧nemo ✧poli ✧imaginex

━━━ 𝗠𝗢𝗧𝗜𝗩𝗔𝗧𝗜𝗢𝗡 ━━━
✧quotes ✧Content ✧Tylorquote ✧myfact ✧advice ✧cat ✧verse ✧ fact ✧fact1 ✧motivation ✧motivation2 ✧myquote ✧myquote2 ✧quote(2-3) 

━━━ 𝗦𝗣𝗢𝗥𝗧𝗦 & 𝗘𝗗𝗜𝗧 ━━━
✧Ronald ✧Messi ✧Neymar ✧Ramos ✧football ✧ff ✧pubgedit ✧codm ✧car ✧twixtor ✧xenoz ✧bleach ✧redit ✧footballedit ✧channel ✧aniedit ✧bleach2
✧aot ✧naruto ✧jjk ✧demonslayer ✧amvquote ✧sallu ✧sallubhai

━━━ 𝗠𝗘𝗠𝗘𝗦 ━━━
✧fun ✧fun2 ✧memevoice ✧pmvd ✧sciencememe ✧meme ✧Mpn ✧smeme ✧giphy ✧pmeme ✧ronb ✧memegen

━━━ 𝗔𝗡𝗜𝗠𝗘 ━━━
✧Anigif ✧aniinfo ✧manga ✧aniedit ✧aniquiz ✧anitrace ✧dance ✧waifu ✧mangadex ✧Sad ✧anivoice ✧aniblur ✧anigif ✧anigirl ✧animeinfo ✧animirror ✧anipic ✧aniquotes ✧anivid ✧aniwatch ✧Anya ✧anya2 ✧avatar ✧avatarv1 ✧cdp(1-4)v4v2
✧genshin ✧gfx(1-v6) ✧gfxv2 ✧mpanel ✧ws ✧zoro ✧animesong  

━━━ 𝗠𝗘𝗗𝗜𝗔 ━━━
✧videofb ✧ytb ✧aldl ✧alldl ✧sing ✧spotify ✧lyrics ✧video ✧fb ✧Media ✧TikTok ✧view ✧YouTube ✧YouTubex ✧autolink ✧axix ✧igdl ✧lyrics ✧lv ✧reels ✧movie

━━━ 𝗥𝗔𝗡𝗞 ━━━
✧rank ✧rankup ✧customrankcard ✧topxp

━━━ 𝗡𝗘𝗪 𝗖𝗠𝗗━━━
✧Bleachinfo ✧opinfo ✧naruinfo ✧collab ✧countryinfo ✧uncrossable(game) ✧vex ✧overly ✧tttx ✧cai ✧cricket ✧sd3 ✧t2v ✧Glen(lens) ✧mage ✧magev2 ✧toonme ✧pet ✧singx ✧spamban ✧bby(chat) ✧ephoto(cover) ✧template ✧ranktop ✧beauty ✧penalty ✧geminiv2(video) ✧at (anime release time) ✧yamato ✧voiceclone 

━━━ 𝗡𝗢𝗡𝗘 𝗣𝗥𝗘𝗙𝗜𝗫 ━━━
✧Ai ✧info ✧gojo ✧hi ✧Bot 

━━━ 𝗦𝗨𝗣𝗣𝗢𝗥𝗧 𝗕𝗢𝗫 ━━━
join Nisimiya Bot Zone ❈ Support Box type: !supportgc or type: !callad to contact with admins.

⇒ Total: 520 commands
⇒ Use /help <cmd> to get more information about a command and /helpx a ( to see a specific cmd)`,
      commandNotFound: "Command \"%1\" does not exist",
      getInfoCommand: "» Description: %2\n» Other names: %3\n» Other names in your group: %4\n» Version: %5\n» Role: %6\n» Time per command: %7s\n» Author: %8\n━━━  ❖  ━━━\n» Usage guide:\n%9\n━━━  ❖  ━━━\n» Notes:\n• The content inside <XXXXX> can be changed\n• The content inside [a|b|c] is a or b or c",
      onlyInfo: "━━━  ❖  ━━━\n│ Command name: %1\n│ Description: %2\n│ Other names: %3\n│ Other names in your group: %4\n│ Version: %5\n│ Role: %6\n│ Time per command: %7s\n│ Author: %8\n❖─────────────❖",
      onlyUsage: "❖── USAGE ────❖\n│%1\n❖─────────────❖",
      onlyAlias: "❖── ALIAS ────❖\n│ Other names: %1\n│ Other names in your group: %2\n❖─────────────❖",
      onlyRole: "❖── ROLE ────❖\n│%1\n❖─────────────❖",
      doNotHave: "Do not have",
      roleText0: "0 (All users)",
      roleText1: "1 (Group administrators)",
      roleText2: "2 (Admin bot)",
      roleText0setRole: "0 (set role, all users)",
      roleText1setRole: "1 (set role, group administrators)",
      pageNotFound: "Page %1 does not exist"
    }
  },

  onStart: async function ({ message, args, event, threadsData, getLang, role, api, usersData}) {


    const langCode = await threadsData.get(event.threadID, "data.lang") || global.GoatBot.config.language;
    let customLang = {};
    const pathCustomLang = path.join(__dirname, "..", "..", "languages", "cmds", `${langCode}.js`);
    if (fs.existsSync(pathCustomLang))
      customLang = require(pathCustomLang);
    const { threadID } = event;
    const threadData = await threadsData.get(threadID);
    const prefix = getPrefix(threadID);
    let sortHelp = threadData.settings.sortHelp || "name";
    if (!["category", "name"].includes(sortHelp))
      sortHelp = "name";
    const commandName = (args[0] || "").toLowerCase();
    const command = commands.get(commandName) || commands.get(aliases.get(commandName));
    // ———————————————— LIST ALL COMMAND ——————————————— //
    if (!command && !args[0] || !isNaN(args[0])) {
      const arrayInfo = [];
      let msg = "";
      if (sortHelp == "name") {
        const page = parseInt(args[0]) || 1;
        const numberOfOnePage = 30;
        for (const [name, value] of commands) {
          if (value.config.role > 1 && role < value.config.role)
            continue;
          let describe = name;
          let shortDescription;
          const shortDescriptionCustomLang = customLang[name]?.shortDescription;
          if (shortDescriptionCustomLang != undefined)
            shortDescription = checkLangObject(shortDescriptionCustomLang, langCode);
          else if (value.config.shortDescription)
            shortDescription = checkLangObject(value.config.shortDescription, langCode);
          if (shortDescription)
            describe += `: ${cropContent(shortDescription.charAt(0).toUpperCase() + shortDescription.slice(1))}`;
          arrayInfo.push({
            data: describe,
            priority: value.priority || 0
          });
        }
        arrayInfo.sort((a, b) => a.data - b.data);
        arrayInfo.sort((a, b) => a.priority > b.priority ? -1 : 1);
        const { allPage, totalPage } = global.utils.splitPage(arrayInfo, numberOfOnePage);
        if (page < 1 || page > totalPage)
          return message.reply(getLang("pageNotFound", page));
        const returnArray = allPage[page - 1] || [];
        const startNumber = (page - 1) * numberOfOnePage + 1;
        msg += (returnArray || []).reduce((text, item, index) => text += `│ ${index + startNumber}${index + startNumber < 10 ? " " : ""}. ${item.data}\n`, '').slice(0, -1);
        await message.reply(getLang("help", msg, page, totalPage, commands.size, prefix, doNotDelete));
      };
    }
    // ———————————— COMMAND DOES NOT EXIST ———————————— //
    else if (!command && args[0]) {
      return message.reply(getLang("commandNotFound", args[0]));
    }
    // ————————————————— INFO COMMAND ————————————————— //
    else {
      const formSendMessage = {};
      const configCommand = command.config;

      let guide = configCommand.guide?.[langCode] || configCommand.guide?.["en"];
      if (guide == undefined)
        guide = customLang[configCommand.name]?.guide?.[langCode] || customLang[configCommand.name]?.guide?.["en"];

      guide = guide || {
        body: ""
      };
      if (typeof guide == "string")
        guide = { body: guide };
      const guideBody = guide.body
        .replace(/\{prefix\}|\{p\}/g, prefix)
        .replace(/\{name\}|\{n\}/g, configCommand.name)
        .replace(/\{pn\}/g, prefix + configCommand.name);

      const aliasesString = configCommand.aliases ? configCommand.aliases.join(", ") : getLang("doNotHave");
      const aliasesThisGroup = threadData.data.aliases ? (threadData.data.aliases[configCommand.name] || []).join(", ") : getLang("doNotHave");

      let roleOfCommand = configCommand.role;
      let roleIsSet = false;
      if (threadData.data.setRole?.[configCommand.name]) {
        roleOfCommand = threadData.data.setRole[configCommand.name];
        roleIsSet = true;
      }

      const roleText = roleOfCommand == 0 ?
        (roleIsSet ? getLang("roleText0setRole") : getLang("roleText0")) :
        roleOfCommand == 1 ?
          (roleIsSet ? getLang("roleText1setRole") : getLang("roleText1")) :
          getLang("roleText2");

      const author = configCommand.author;
      const descriptionCustomLang = customLang[configCommand.name]?.longDescription;
      let description = checkLangObject(configCommand.longDescription, langCode);
      if (description == undefined)
        if (descriptionCustomLang != undefined)
          description = checkLangObject(descriptionCustomLang, langCode);
        else
          description = getLang("doNotHave");

      let sendWithAttachment = false;

      if (args[1]?.match(/^-g|guide|-u|usage$/)) {
        formSendMessage.body = getLang("onlyUsage", guideBody.split("\n").join("\n"));
        sendWithAttachment = true;
      }
      else if (args[1]?.match(/^-a|alias|aliase|aliases$/))
        formSendMessage.body = getLang("onlyAlias", aliasesString, aliasesThisGroup);
      else if (args[1]?.match(/^-r|role$/))
        formSendMessage.body = getLang("onlyRole", roleText);
      else if (args[1]?.match(/^-i|info$/))
        formSendMessage.body = getLang("onlyInfo", configCommand.name, description, aliasesString, aliasesThisGroup, configCommand.version, roleText, configCommand.countDown || 1, author || "");
      else {
        formSendMessage.body = getLang("getInfoCommand", configCommand.name, description, aliasesString, aliasesThisGroup, configCommand.version, roleText, configCommand.countDown || 1, author || "", `${guideBody.split("\n").join("\n")}`);
        sendWithAttachment = true;
      }

      if (sendWithAttachment && guide.attachment) {
        if (typeof guide.attachment == "object") {
          formSendMessage.attachment = [];
          for (const pathFile in guide.attachment) {
            if (!fs.existsSync(pathFile)) {
              const cutFullPath = pathFile.split("/").filter(item => item != "");
              cutFullPath.pop();
              for (let i = 0; i < cutFullPath.length; i++) {
                const path = cutFullPath.slice(0, i + 1).join('/');
                if (!fs.existsSync(path))
                  fs.mkdirSync(path);
              }
              const getFile = await axios.get(guide.attachment[pathFile], { responseType: 'arraybuffer' });
              fs.writeFileSync(pathFile, Buffer.from(getFile.data));
            }
            formSendMessage.attachment.push(fs.createReadStream(pathFile));
          }
        }
      }
      return message.reply(formSendMessage);
    }
  }
};

function checkLangObject(data, langCode) {
  if (typeof data == "string")
    return data;
  if (typeof data == "object" && !Array.isArray(data))
    return data[langCode] || data.en || undefined;
  return undefined;
}

function cropContent(content, max) {
  if (content.length > max) {
    content = content.slice(0, max - 3);
    content = content + "...";
  }
  return content;
}
