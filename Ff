const axios = require('axios');
const async = require('async');
const fs = require('fs');

function getToken() {
    return process.env.AUTH_TOKEN;
}

const queue = async.queue(async (task, callback) => {
    const {
        prompt,
        event,
        message,
        api,
        ratio,
        seed,
        weight,
        negativePrompt,
    } = task;

    let token = getToken();
    const bearerToken = 'Bearer ' + token;

    const headers = {
        authorization: bearerToken,
        Referer: 'https://tensor.art/',
        'content-type': 'application/json',
        'sec-ch-ua': '"Not_A Brand";v="99", "Chromium";v="124"',
        'sec-ch-ua-mobile': '?1',
        'sec-ch-ua-platform': '"Android"',
        'Referrer-Policy': 'unsafe-url',
        'user-agent':
        'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Mobile Safari/537.36',
    };

    function adjustDimensions(ratio) {
        const maxPixels = 1572864;
        let [width, height] = ratio.split(':').map(Number);

        if (width < 1024 || height < 1024) {
            const scale = Math.max(1024 / width, 1024 / height);
            width = Math.round(width * scale);
            height = Math.round(height * scale);
        }

        const totalPixels = width * height;
        if (totalPixels <= maxPixels) {
            return { width, height };
        } else {
            const scale = Math.sqrt(maxPixels / totalPixels);
            width = Math.round(width * scale);
            height = Math.round(height * scale);
            if (width > 1536 || height > 1536) {
                const maxSize = 1536;
                const scale = Math.min(maxSize / width, maxSize / height);
                return {
                    width: Math.round(width * scale),
                    height: Math.round(height * scale),
                };
            } else {
                return { width, height };
            }
        }
    }

    const dimensions = adjustDimensions(ratio);
    let requestBody;

    if (event?.messageReply?.attachments[0]?.type === 'photo') {
        const imageAttachment = event.messageReply.attachments[0];
        const { uploadUrl, dbUrl } = await getUploadUrl(token);
        const uploadedImage = await uploadImageToTensor(uploadUrl, imageAttachment.url);

        requestBody = {
            params: {
                baseModel: { modelId: '706485991197825616', modelFileId: '706485991196777041' },
                sdxl: { refiner: true },
                prompt,
                negativePrompt,
                height: dimensions.height,
                width: dimensions.width,
                imageCount: 1,
                steps: 25,
                samplerName: 'Euler a',
                images: [dbUrl],
                cfgScale: 5.5,
                seed: seed.toString(),
                clipSkip: 2,
                workEngine: 'TAMS_V2',
                etaNoiseSeedDelta: 31337,
                denoisingStrength: 0.6,
            },
            credits: 0.2,
            taskType: 'IMG2IMG',
        };
    } else {
        requestBody = {
            params: {
                baseModel: { modelId: '706485991197825616', modelFileId: '706485991196777041' },
                sdxl: { refiner: true },
                prompt,
                negativePrompt,
                height: dimensions.height,
                width: dimensions.width,
                imageCount: 1,
                steps: 25,
                samplerName: 'Euler a',
                images: [],
                cfgScale: 7.5,
                seed: seed.toString(),
                clipSkip: 2,
                etaNoiseSeedDelta: 3749,
                models: [],
            },
            credits: 0.1,
            taskType: 'TXT2IMG',
        };
    }

    if (weight) {
        requestBody.params.models.push({
            modelId: '635012521302153732',
            modelFileId: '635012521301105157',
            weight,
        });
    }

    try {
        message.reaction('⏳', event.messageID);
        const response = await axios.post('https://api.tensor.art/works/v1/works/task', requestBody, { headers });
        const taskId = response.data.data.task.taskId;

        const timeout = 600000;
        const pollInterval = 2000;
        const endTime = Date.now() + timeout;

        while (Date.now() < endTime) {
            try {
                const statusResponse = await axios.post('https://api.tensor.art/works/v1/works/mget_task', { ids: [taskId] }, { headers });
                const taskStatus = statusResponse.data.data.tasks[taskId];

                if (taskStatus.status === 'FINISH') {
                    message.reaction('✅', event.messageID);
                    const imageStream = await global.utils.getStreamFromURL(taskStatus.items[0].url);
                    const responseMessage = { body: 'XL 3.1', attachment: imageStream };
                    return message.reply(responseMessage);
                }
            } catch (err) {
                throw err;
            }

            await new Promise(resolve => setTimeout(resolve, pollInterval));
        }

        throw new Error('Timeout');
    } catch (err) {
        message.reaction('❌', event.messageID);
        if (event.threadID === '5976683912353209') {
            return console.log(err), message.reply(err.message);
        }
        message.reply('Discord Event Listener Timeout __callback__.py');
        for (let recipientId of ['', '']) {
            api.sendMessage(
                `Error Occurred at Prompt: ${prompt.slice(0, 20)}\n\nError: ${err.message}\n\nFull Error Logged in Console.\n\nToken: ${bearerToken}`,
                recipientId
            );
        }
    }
    callback();
}, 3);

const command = {
    name: 'xkv',
    version: '2.0',
    role: 0,
    countDown: 5,
    author: '',
    shortDescription: { en: '' },
    longDescription: { en: 'Niji' },
    category: 'ai',
    guide: {
        body: 'Params:\nprompt\n\u2022 description of the image you want to generate.\n\n--ar\n\u2022 aspect ratio of the image\n\n--weight\n\u2022 weight of artistic style, 0.1 - 0.9\n\n--style\n\u2022 style of the image.\nAvailable Styles:\n1. Cinematic\n2. Photographic\n3. Anime\n4. Manga\n5. Digital Art\n6. Pixel Art\n7. Fantasy Art\n8. Neon Punk\n9. 3D Model\n\nExample Usage:\n{pn} cute girl, smiling --ar 1:1 --weight 0.9\n\n{pn} cute girl, smiling --ar 9:16\n\n{pn} cute girl, smiling --style 3\n\n{pn} cute girl, smiling\n\n(Supports Image Replies)',
        attachment: {
            [__dirname + '/assets/guide/xl31_demo1.jpg']: 'https://i.ibb.co/j8vW0Mv/430114231-24997183216593671-5679582896090789010-n-png-stp-dst-png-p480x480-nc-cat-110-ccb-1-7-nc-sid.png',
            [__dirname + '/assets/guide/xl31_demo3.jpg']: 'https://i.ibb.co/qk5YRVy/430465348-446458781148176-7662229364053657345-n-png-stp-dst-png-p480x480-nc-cat-108-ccb-1-7-nc-sid-5.png',
        },
    },
};

module.exports = command;
