const fs = require('fs-extra');
const axios = require('axios');
const path = require('path');
const { getPrefix } = global.utils;
const { commands, aliases } = global.GoatBot;

module.exports = {
    config: {
        name: 'help',
        version: '1.0',
        author: 'Vincenzo || kshitiz',
        countDown: 5,
        role: 0,
        shortDescription: {
            en: 'List all available commands'
        },
        longDescription: {
            en: 'View a comprehensive list of all available commands'
        },
        category: 'info',
        guide: {
            en: '{pn} / help'
        },
        priority: 1
    },

    onStart: async function ({ message, args, event, threadsData, role }) {
        const { threadID } = event;
        const threadData = await threadsData.get(threadID);
        const prefix = getPrefix(threadID);

        if (args.length === 0) {
            await this.customHelpMessage(message);
            return;
        }

        if (args[0] === '-s') {
            const category = args[1]?.toUpperCase();
            if (category) {
                await this.listCommandsByCategory(category, message);
            } else {
                await message.reply(`Please specify a category after '-s'. Example: ${prefix}helpx -s A`);
            }
            return;
        }

        if (args[0] === '-2') {
            await this.listAllCommands(message);
            return;
        }

        const commandName = args[0].toLowerCase();
        const commandInfo = await this.getCommandInfo(commandName);

        if (commandInfo) {
            const response = `
━━━  ❖  ━━━
» Description: ${commandInfo.description}
» Other names: ${commandInfo.aliases}
» Other names in your group: ${commandInfo.groupAliases}
» Version: ${commandInfo.version}
» Role: ${commandInfo.roleText}
» Time per command: ${commandInfo.countDown}s
» Author: ${commandInfo.author}
━━━  ❖  ━━━
» Usage guide:
${commandInfo.usage}
━━━  ❖  ━━━
» Notes:
• The content inside <XXXXX> can be changed
• The content inside [a|b|c] is a or b or c
            `;
            await message.reply(response);
        } else {
            await message.reply(`The command "${commandName}" does not exist.`);
        }
    },

    customHelpMessage: async function (message) {
        const totalCommands = commands.size;
        const customHelpMessage = `
╔═══════════╗
 𝗡𝗜𝗦𝗛𝗜𝗠𝗜𝗬𝗔 𝗖𝗵𝗮𝘁𝗯𝗼𝘁
 ╚═══════════╝

╭──『  𝗢𝗪𝗡𝗘𝗥  』
✧adminonly ✧approved ✧backupdata ✧bin ✧bio ✧cmd ✧code ✧delete cmd ✧devonly ✧edit8 ✧editx ✧event ✧file ✧getfbstate ✧hubble ✧ignoreonlyad ✧ignoreonlyadbox ✧jsontomongodb ✧jsontosqlite ✧loadconfig ✧notice ✧notification ✧owner ✧setavt ✧setlang ✧setrankup ✧thread ✧up ✧update ✧upt ✧upt2 ✧user ✧vip ✧w ✧whitelist
✧out ✧ping ✧resetprefix ✧setalias ✧shell
╰────────────◊

╭──『  𝗔𝗗𝗠𝗜𝗡  』
✧block ✧leave ✧main ✧usage ✧notify
✧goatmart ✧clean ✧eval ✧join ✧pending
✧delete ✧stats ✧theme ✧uptime ✧uptime2
✧whitelistthread ✧addfile ✧admin list  ✧autoseen ✧example ✧restart ✧run
╰────────────◊

╭──『  𝗜𝗠𝗔𝗚𝗘  』
✧affect ✧arrest ✧avatar ✧batslap ✧blink ✧chad ✧coupledp ✧ephoto ✧giphy ✧link ✧pair ✧pdf ✧pin ✧prodia ✧profile ✧sdxl ✧sorthelp ✧spy ✧template ✧trigger ✧ws
╰────────────◊

╭──『 𝗧𝗢𝗢𝗟'𝗦  』
✧countryinfo ✧fakechat ✧fakechat2 ✧cover
✧mangaread ✧getlink2 ✧github ✧convert
✧imgur ✧memberlist ✧namaj ✧ownerx ✧prefix ✧qr ✧rembg ✧resetbalance ✧bday
✧wish ✧analytics ✧apimarket ✧appstore
✧compile ✧emojimean ✧getlink ✧gcimg ✧font ✧ta(tag) ✧snippet ✧spam 
╰────────────◊

╭──『  𝗙𝗨𝗡  』
✧clown ✧drip ✧duck ✧elon ✧emojimix ✧hack ✧inbox ✧joke2 ✧love ✧mark ✧married ✧motivation ✧myfact ✧myquote ✧nokia ✧pickuplines ✧propose ✧quote ✧rip ✧rizz ✧sad ✧train ✧wishcard ✧gay ✧berojgar ✧fun2 ✧mistake ✧content ✧hell ✧joke ✧fun ✧smsg ✧khaby ✧willsmith 
╰────────────◊

╭──『 𝗚𝗔𝗠𝗘  』
✧wordguess ✧aniquiz ✧daily ✧dhbc ✧dicedash ✧fish ✧flag ✧frogjump ✧guessactor ✧guessnumber ✧memorygame ✧penalty ✧riddle ✧tod ✧truthordare ✧ttt ✧tttv2 ✧tttvx ✧uncrossable ✧worker ✧xcup
✧pet ✧country  ✧fight ✧quiz ✧slot  
╰────────────◊

╭──『 𝗕𝗢𝗫-𝗖𝗛𝗔𝗧 』
✧adduser ✧admin ✧all ✧antichangeinfobox ✧autosetname ✧badwords ✧ban ✧busy ✧count ✧filteruser ✧kick ✧nncheck ✧onlyadminbox ✧refresh ✧rules ✧sendnoti ✧setname ✧unsend ✧warn ✧nn ✧spamban
✧spamkick ✧supportgc ✧setleave ✧system ✧setwelcome ✧shortcut ✧support
╰────────────◊

╭──『 𝗖𝗢𝗡𝗧𝗥𝗔𝗖𝗧-𝗔𝗗𝗠𝗜𝗡𝗦 』
✧callad
╰───────────◊

╭──『 𝗨𝗧𝗜𝗟𝗜𝗧𝗬  』
✧album ✧botstats ✧cmdstore ✧connectgc ✧image ✧imgbb ✧inf ✧ipshow ✧tempmail ✧translate ✧upscaleai ✧v2a ✧view ✧home
✧pinjourney ✧muptime ✧antiout ✧ip
╰────────────◊

╭──『 𝗙𝗨𝗡-𝟮 』
 ✧berojgar  ✧dance 
 ✧fun ✧fun2 ✧cm
╰────────────◊

╭──『 𝗨𝗧𝗜𝗟𝗜𝗧𝗬-𝟮 』
✧accept ✧avatar1 ✧cricket ✧gmage ✧pastebin ✧requestmain ✧short ✧weather
✧cbin ✧info ✧movieinfo ✧stalk ✧ss ✧ss2
╰────────────◊

╭──『  𝗜𝗡𝗙𝗢  』
 ✧cbin ✧info ✧stalk ✧cardinfo ✧cardinfo2
✧cover2 ✧fbcover
╰────────────◊

╭──『 𝗙𝗢𝗢𝗧𝗕𝗔𝗟𝗟  』
 ✧messi ✧neymar ✧ramos
 ✧ronaldo
╰────────────◊

╭──『  𝗗𝗘𝗩𝗘𝗟𝗢𝗣𝗘𝗥  』
 ✧scrape ✧whitelist 
 ✧whitelistthread
╰────────────◊

╭──『  𝗠𝗘𝗠𝗘  』
✧sciencememe ✧smeme  ✧buttslap ✧cry 
✧gname ✧trash ✧programmingmeme ✧cry ✧trash ✧wanted ✧meme
╰────────────◊

╭──『  𝗧𝗧𝗦  』
 ✧say  ✧anya2
╰────────────◊

╭──『  𝗦𝗧𝗨𝗗𝗬  』
 ✧quote2 ✧fixgrammar ✧advice ✧fact  
╰────────◊

╭──『  𝗚𝗥𝗢𝗨𝗣  』
 ✧spamkick ✧top ✧topxp
╰────────────◊

╭───『  𝗔𝗡𝗜𝗠𝗘 』
✧aniblur ✧aniedit ✧animetime ✧anivid ✧bleachinfo ✧naruinfo ✧opinfo ✧twixtor
✧anipic ✧anigif ✧animeinfo ✧animequotes ✧animetrend ✧anitrace ✧anivoice ✧bankai ✧bleach ✧dance ✧manga ✧mangadex ✧waifux ✧anistatus ✧onepiece ✧xenoz
✧aniwatch ✧cdp2
╰────────────◊

╭──『  𝗘𝗖𝗢𝗡𝗢𝗠𝗬  』
 ✧balance ✧money ✧richest ✧set ✧bank
╰────────────◊

╭──『  𝗧𝗘𝗫𝗧𝗣𝗥𝗢  』
 ✧khaby ✧willsmith ✧quote3
╰────────────◊

╭─『 𝗖𝗢𝗡𝗧𝗥𝗔𝗖𝗧 』
 ✧callad  ✧botgc 
 ✧supportgc
╰────────────◊

╭──『  𝗠𝗨𝗦𝗜𝗖  』
✧animesong ✧media ✧sing ✧spotify ✧youtubex ✧lyrics
╰────────────◊

╭──『  𝗟𝗢𝗚𝗢  』
 ✧cardinfo ✧cardinfo2 
╰────────────◊

╭──『  𝗠𝗘𝗗𝗜𝗔 』
✧fyp ✧tiktok ✧video ✧alldl ✧autolink ✧ytb ✧collab ✧overlay ✧write ✧youtube
╰────────────◊

╭───『 𝗟𝗢𝗩𝗘 』
✧kiss ✧marry ✧pair2 ✧pair3 ✧ship ✧us
╰────────────◊

╭───『  𝗦𝗢𝗖𝗜𝗔𝗟  』
 ✧fbpost ✧fbreport ✧fbshare
╰────────────◊

╭──『  𝗔𝗜-𝗖𝗛𝗔𝗧 』
✧anya2 ✧blackbox ✧gemini ✧gojo ✧gpt ✧roast ✧gpt ✧hinu ✧baby
╰────────────◊

╭──『 𝗚𝗙𝗫 』
 ✧gfx  ✧gfx3 ✧gfx4
╰────────────◊

╭──『 𝗔𝗜-𝗚𝗘𝗡𝗘𝗥𝗔𝗧𝗘𝗗 』
✧realis ✧xl30 ✧alya ✧alya2 ✧flux ✧flux2   ✧niji5 ✧niji6 ✧nijiv5 ✧nijiv6 ✧animex ✧xl  ✧xl4 ✧wc(prompt) ✧prompt ✧emi ✧gen
✧nigi ✧nixi ✧fluxv2 ✧niji ✧nijiz ✧genx ✧playgroundu ✧imaginex ✧fluxx ✧xl31
✧dallex ✧prompt3 ✧imagejourney (ij) ✧pr
✧imagine ✧prompt2 ✧poli ✧art ✧dalle
╰────────────◊

╭──『 𝗣𝗢𝗞𝗘𝗠𝗢𝗡 』
✧pokebot   ✧pokeinfo  ✧pokechamps ✧pokedex  ✧poketrade
╰────────────◊

╭──『 𝗖𝗨𝗦𝗧𝗢𝗠 』
 ✧setleave ✧setwelcome 
 ✧shortcut
╰────────────◊

╭──『 𝗪𝗔𝗜𝗙𝗨 𝗚𝗔𝗠𝗘 』
✧waifuinfo ✧waifudex
✧waifupull ✧waifusell ✧waifusellall
╰────────────◊

╭──『  𝗥𝗔𝗡𝗞  』
 ✧customrankcard ✧rank 
 ✧ranktop ✧rankup ✧top ✧topxp
╰────────────◊


━━━ 𝗦𝗨𝗣𝗣𝗢𝗥𝗧 𝗕𝗢𝗫 ━━━
Join Nisimiya Bot Zone ❈ Support Box type: !supportgc or type: !callad to contact with admins.

⇒ Total: ${totalCommands} commands
⇒ Use /help <cmd> to get more information about a command
        `;
        await message.reply(customHelpMessage);
    },

    listCommandsByCategory: async function (category, message) {
        const allCommands = Array.from(commands.entries()).sort();
        let formattedResponse = "";

        formattedResponse += `╭──『  ${category} 』\n`;

        for (const [command, config] of allCommands) {
            if (command.charAt(0).toUpperCase() === category) {
                formattedResponse += `✧${command} `;
            }
        }

        if (formattedResponse === `╭──『  ${category} 』\n`) {
            await message.reply(`No commands found for category ${category}.`);
            return;
        }

        formattedResponse += `\n╰───────────◊\n\nTotal ${category} category cmds = ${allCommands.filter(cmd => cmd[0].charAt(0).toUpperCase() === category).length}`;

        await message.reply(formattedResponse);
    },

    listAllCommands: async function (message) {
        const allCommands = Array.from(commands.keys()).sort();
        let formattedResponse = "";

        formattedResponse += `╭──『  𝗕𝗢𝗧𝗡𝗔𝗠𝗘 』\n`;
        formattedResponse += `✧ ${boldText("NIŞHİMİYA")} \n`;
        formattedResponse += `╰───────────◊\n\n`;

        let currentLetter = '';
        for (const command of allCommands) {
            const firstLetter = command.charAt(0).toUpperCase();
            if (firstLetter !== currentLetter) {
                if (currentLetter !== '') {
                    formattedResponse += `╰───────────◊\n\n`;
                }
                currentLetter = firstLetter;
                formattedResponse += `╭──『  ${firstLetter} cmds 』\n`;
            }
            formattedResponse += `✧${command} `;
        }

        formattedResponse += `\n╰───────────◊\n\n`;
        formattedResponse += `├───────⭔\n » Currently, the bot has (${commands.size}) commands that can be used\n`;

        await message.reply(formattedResponse);
    },

    getCommandInfo: async function (commandName) {
        const command = commands.get(commandName);
        
        if (command) {
            const { config } = command;
            const guideBody = config.guide?.en || config.guide?.["en"] || '';

            return {
                name: config.name,
                version: config.version,
                author: config.author || 'Unknown',
                aliases: (config.aliases || []).join(', ') || 'None',
                groupAliases: (config.groupAliases || []).join(', ') || 'None',
                role: config.role,
                roleText: getRoleText(config.role),
                countDown: config.countDown || 1,
                usage: guideBody.split('\n').map(line => `• ${line}`).join('\n') || 'No usage information available',
                description: config.longDescription?.en || 'No details available'
            };
        } else {
            return null;
        }
    }
};

function boldText(text) {
    return `𝙉𝙄𝙎𝙃𝙄𝙈𝙄𝙔𝘼 𓃝`;
}

function getRoleText(role) {
    switch (role) {
        case 0: return '0 (All users)';
        case 1: return '1 (Group administrators)';
        case 2: return '2 (Admin bot)';
        default: return 'Do not have';
    }
}
